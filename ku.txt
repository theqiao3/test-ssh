#!/usr/bin/env python
# -*- coding: utf-8 -*-

import socket
import struct

# 创建一个socket
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# 主动去连接局域网内IP为192.168.27.238，端口为6666的进程,即服务器端设置的ip和端口
client.connect(('192.168.0.105', 6688))

while True:
    # 接受控制台的输入
    data = input()
    # 对数据进行编码格式转换，不然报错
    data = data.encode('utf-8')
    # 如果输入quit则退出连接
    if data == b'quit':
        print(b'connect quit.')
        break
    else:
        # 确定要发送数据的长度
        data_len = len(data)
        # 将这个长度打包成特定byte的数据，参数'i'表明4个byte
        send_data_len = struct.pack('i', data_len)
        # 发送数据长度
        client.send(send_data_len)
        # 发送数据
        client.send(data)
        # 接收服务端的反馈数据
        # 先接收保存有数据长度的4个byte
        rec_data_len = client.recv(4)
        # 得到数据长度
        rec_data_len1 = struct.unpack('i', rec_data_len)[0]
        # 接收得到数据长度的数据
        rec_data = client.recv(rec_data_len1)
        print(b'form server receive:' + rec_data)

# 发送数据告诉服务器退出连接
client.sendall(b'quit')
client.close()



#!/usr/bin/env python
# -*- coding: utf-8 -*-

import socket
import struct

# 创建一个socket套接字，该套接字还没有建立连接
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# 绑定监听端口，这里必须填本机的ip,后面6688是端口号，自选
server.bind(('192.168.0.105', 6688))
# 开始监听，并设置最大连接数
server.listen(5)

print(u'waiting for connect...')
# 等待连接，一旦有客户端连接后，返回一个建立了连接后的套接字和连接的客户端的IP和端口元组
connect, (host, port) = server.accept()
print(u'the client %s:%s has connected.' % (host, port))

while True:
    # 接受客户端的数据
    # 先接收保存有数据长度的4个byte
    rec_data_len = connect.recv(4)
    # 得到数据长度
    rec_data_len1 = struct.unpack('i', rec_data_len)[0]
    # 接收得到数据长度的数据
    data = connect.recv(rec_data_len1)
    # 如果接受到客户端要quit就结束循环
    if data == b'quit' or data == b'':
        print(b'the client has quit.')
        break
    else:
        # 发送数据给客户端
        connect.send(b'your words has received.')
        print(b'the client say:' + data)

# 结束socket
server.close()